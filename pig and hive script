#!/bin/shtable_name=$1meta_file=$2pigScript=/mapr/datalake/other/cdb/app/cdb_redesign/pig/pig_cdb_update_${table_name}.pigcreate_orc_hql=/mapr/datalake/other/cdb/app/cdb_redesign/hive/Create_ORC_${table_name}.hqlcreate_hbase_hql=/mapr/datalake/other/cdb/app/cdb_redesign/hive/Create_Hbase_${table_name}.hqlecho "SET default_parallel 300;  SET mapred.task.timeout 1200000;  SET mapreduce.jobtracker.split.metainfo.maxsize '-1';  SET mapred.job.queue.name '\$pig_queue';  SET job.name 'cdb_update_${table_name}';  SET mapreduce.task.classpath.user.precedence true;  SET mapred.fairscheduler.smalljob.schedule.enable false;REGISTER \$pig_jar_path_piggyREGISTER \$pig_jar_path_jodaDEFINE DATE_TIME org.apache.pig.piggybank.evaluation.datetime.DATE_TIME();DEFINE ToUnix org.apache.pig.builtin.ToUnixTime();Define CustomFormatToISO org.apache.pig.piggybank.evaluation.datetime.convert.CustomFormatToISO();DEFINE ISOToUnix org.apache.pig.piggybank.evaluation.datetime.convert.ISOToUnix();REGISTER \$pig_jar_path_OptumBDS/OptumBDSCustomPigLib.jarDEFINE CustomHBaseStorage com.optum.bds.pigload.CustomHBaseStorage();" > $pigScriptecho "" >> $pigScriptvar1="$(while read EachLinedo   set -- "$EachLine"   IFS="|"; declare -a Array=($*)   if [ "${Array[3]}" = "COLUMN_NAME" ]   then        printf ""   else printf "${Array[3]}:chararray, "   fidone < ${meta_file})"var1=`echo $var1 | sed 's/.\{1\}$//'`echo "${table_name}_hbase_pig = load '\$pig_load_path/$table_name/\$pig_load_ver/current' using PigStorage('\\u0001') as ($var1);" >> $pigScriptecho "" >> $pigScriptsnap_config=/datalake/uhclake/tst/t_mtables/snapshot_configkey=UHC-CDB-$table_nameCOLUMN=ec:prikeycolsprimaryKey=`echo "get  '${snap_config}', '${key}' , {COLUMN => '$COLUMN'}" | hbase shell | grep "value" | awk -F"=" '{print $3}' | sed -e 's/;/,/g'`newPrimary=`echo ${primaryKey} | sed -e "s/,/),'~',TRIM(/g"`printf "X = foreach ${table_name}_hbase_pig{ generate CONCAT(TRIM($newPrimary)), (long)ISOToUnix(CustomFormatToISO(CDC_TS, 'yyyy-MM-dd HH:mm:ss.SSS')) as CDC2, " >> $pigScriptvar2="$(while read EachLinedo   set -- "$EachLine"   IFS="|"; declare -a Array=($*)   if [ "${Array[3]}" = "COLUMN_NAME" ]   then        printf ""   elif [ "${Array[3]}" = "CDC_TS" ]   then        printf ""   elif [ "${Array[3]}" = "CDC_FLAG" ]   then        printf ""   else printf "${Array[3]}, "   fidone < ${meta_file})"var2=`echo $var2 | sed "s/ROW_STS_CD/(case CDC_FLAG when \'D\' then \'X\'  else ROW_STS_CD end) as  ROW_STS_CD/g" `echo $var2" CDC_TS,CDC_FLAG ;}" >> $pigScriptecho ""  >> $pigScriptvar3="$(while read EachLinedo   set -- "$EachLine"   IFS="|"; declare -a Array=($*)#   echo "Array number 3 value : ${Array[3]}"   if [ "${Array[3]}" = "COLUMN_NAME" ]   then        printf ""   elif [ "${Array[3]}" = "CDC_FLAG" ]   then printf ""   elif [ "${Array[3]}" = "CDC_TS" ]    then        printf ""     else printf "cf:${Array[3]}, "   fidone < ${meta_file})"var3=`echo $var3 `echo "STORE X INTO '\$pig_hbase_path/$table_name' using com.optum.bds.pigload.CustomHBaseStorage('${var3} cf2:CDC_TS, cf2:CDC_FLAG' , 'includeTimestamp=true') ;" >> $pigScript############################## CREATE ORC HQL SCRIPT #############################################key=`echo ${table_name} | sed 's/_//g'`echo "use \${hiveconf:db};set hiveconf:db;drop table if exists ${table_name}_ORC_temp; set hive.exec.parallel=true;CREATE TABLE ${table_name}_ORC_temp(${key}K STRING," > $create_orc_hqlorc_hql="$(while read EachLinedo   set -- "$EachLine"   IFS="|"; declare -a Array=($*)   if [ "${Array[3]}" = "COLUMN_NAME" ]   then printf ""   elif [ "${Array[4]}" = "TIMESTAMP" ]   then        echo "${Array[3]} TIMESTAMP, "   elif [ "${Array[3]}" = "CDC_TS" ]   then        echo ""   elif [ "${Array[3]}" = "CDC_FLAG" ]   then        echo ""   elif [ "${Array[4]}" = "INTEGER" ]   then        echo "${Array[3]} INT, "   elif [ "${Array[4]}" = "DATE" ]   then        echo "${Array[3]} DATE, "   else        echo "${Array[3]} STRING, "   fidone < ${meta_file})"echo $orc_hql >> $create_orc_hqlecho "CDC_TS STRING,CDC_FLAG STRING) COMMENT 'A bucketed copy of ${table_name}'ROW FORMAT DELIMITED FIELDS TERMINATED BY '\001' LINES TERMINATED BY '\n' STORED AS ORC TBLPROPERTIES ("orc.compress"="SNAPPY");INSERT INTO TABLE ${table_name}_ORC_temp SELECT * FROM ${table_name}_hbase;drop table if exists ${table_name}_ORC;alter table ${table_name}_ORC_temp rename to ${table_name}_ORC;" >> $create_orc_hql############################## CREATE HBASE HQL SCRIPT #############################################echo "use \${hiveconf:db};set hiveconf:db;set hiveconf:hbase_location;drop table if exists ${table_name}_hbase;" > $create_hbase_hqlprintf "CREATE EXTERNAL TABLE ${table_name}_hbase(${key}K STRING," >> $create_hbase_hqlhbase_hql="$(while read EachLinedo   set -- "$EachLine"   IFS="|"; declare -a Array=($*)   if [ "${Array[3]}" = "COLUMN_NAME" ]   then        printf ""   elif [ "${Array[3]}" = "CDC_FLAG" ]   then printf ""   elif [ "${Array[3]}" = "CDC_TS" ]    then        printf ""   else        echo "${Array[3]} STRING, "   fidone < ${meta_file})"echo $hbase_hql  >> $create_hbase_hqlprintf " CDC_TS STRING, CDC_FLAG STRING )STORED BY'org.apache.hadoop.hive.hbase.HBaseStorageHandler' WITH SERDEPROPERTIES(\"hbase.columns.mapping\"=\":key," >> $create_hbase_hqlecho $var3 "\") TBLPROPERTIES(\"hbase.table.name\"=\"\${hiveconf:hbase_location}/${table_name}\");" >> $create_hbase_hql
